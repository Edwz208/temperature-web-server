#include <WiFi.h>
#include <WebServer.h>
#include <DHT.h>
#include <FS.h>
#include <SPIFFS.h>
#include <ArduinoJson.h>
#include <time.h>

#define dhtPin 27
#define DHTTYPE DHT11

DHT dht(dhtPin, DHTTYPE);
WebServer server(80);

const char* ssid = "";
const char* password = "";

float temperature = 0;
float humidity = 0;

unsigned long previousMillis = 0;
const long interval = 5000;

struct Reading {
  float temperature;
  float humidity;
};

Reading readings[50]; 
int currentIndex = 0; 
int readingsCount = 0; 

void setup() {
  Serial.begin(115200);
  dht.begin();
  pinMode(dhtPin, INPUT_PULLUP);
  pinMode(26, OUTPUT);

  if (!SPIFFS.begin(true)) {
    Serial.println("Error with SPIFFS");
    return;
  }

  connectToWifi();
  beginServer();

  configTime(-5 * 3600, 3600, "pool.ntp.org", "time.nist.gov");

  Serial.println("Time syncing...");
  struct tm timeinfo;
  while (!getLocalTime(&timeinfo)) {
    delay(1000);
    Serial.println("...");
  }
  Serial.println("Time synchronized");
}

void loop() {
  server.handleClient();

  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    getTemperature();
    getHumidity();
    struct tm timeinfo;
    char timeStr[20];
    if (getLocalTime(&timeinfo)) {
      strftime(timeStr, sizeof(timeStr), "%H:%M:%S", &timeinfo);
      handleData(String(timeStr));
    } else {
      handleData("00:00:00");
    }
  }
}

void connectToWifi() {
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void beginServer() {
  server.on("/", HTTP_GET, []() {
    serveFile("/index.html", "text/html");
  });
  server.on("/style.css", HTTP_GET, []() {
    serveFile("/style.css", "text/css");
  });
  server.on("/script.js", HTTP_GET, []() {
    serveFile("/script.js", "application/javascript");
  });
  server.on("/data", HTTP_GET, []() {
    struct tm timeinfo;
    char timeStr[20];
    if (getLocalTime(&timeinfo)) {
      strftime(timeStr, sizeof(timeStr), "%H:%M:%S", &timeinfo);
    } else {
      strcpy(timeStr, "00:00:00");
    }
    handleData(timeStr);
  });

  server.on("/ding.mp3", HTTP_GET, []() {
    serveFile("/ding.mp3", "audio/mpeg");
  });

  server.onNotFound([]() {
    server.send(404, "text/plain", "File Not Found");
  });

  server.begin();
  Serial.println("HTTP server started");
  
}

void serveFile(String path, String contentType) {
  if (SPIFFS.exists(path)) {
    File file = SPIFFS.open(path, "r");
    server.streamFile(file, contentType);
    file.close();
  } else {
    server.send(404, "text/plain", "File Not Found");
  }
}

void handleData(String timeStr) {
  float avgTemperature = 0;
  float avgHumidity = 0;
  int validReadings = 0; 

  for (int i = 0; i < readingsCount; i++) {
    if (!isnan(readings[i].temperature) && !isnan(readings[i].humidity)) {
      avgTemperature += readings[i].temperature;
      avgHumidity += readings[i].humidity;
      validReadings++;
    }
  }

  if (validReadings > 0) {
    avgTemperature /= validReadings;
    avgHumidity /= validReadings;
  }

  String json;
  StaticJsonDocument<200> doc;
  doc["avgTemp"] = avgTemperature;
  doc["avgHum"] = avgHumidity;
  doc["time"] = timeStr;
  doc["temperature"] = temperature;
  doc["humidity"] = humidity;
  serializeJson(doc, json);

  server.send(200, "application/json", json);
  
}

void getTemperature() {
  float temp = dht.readTemperature();
  if (isnan(temp)) {
    Serial.println("Failed to read temperature");
  } else {
    temperature = round(temp * 1000.0) / 1000.0;
    Serial.print("Temperature: ");
    Serial.print(temperature);
    Serial.println(" Â°C");
    
    storeReading(temperature, humidity);
  }
}

void getHumidity() {
  float hum = dht.readHumidity();
  if (isnan(hum)) {
    Serial.println("Failed to read humidity");
  } else {
    humidity = hum;
    Serial.print("Humidity: ");
    Serial.print(humidity);
    Serial.println(" %");
  }
}

void storeReading(float temp, float hum) {
  readings[currentIndex].temperature = temp;
  readings[currentIndex].humidity = hum;

  currentIndex = (currentIndex + 1) % 50; 
  if (readingsCount < 50) {
    readingsCount++; 
  }
}
